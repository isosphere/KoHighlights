# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'gui_toolbar.ui'
##
## Created by: Qt User Interface Compiler version 6.6.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,
    QFont, QFontDatabase, QGradient, QIcon,
    QImage, QKeySequence, QLinearGradient, QPainter,
    QPalette, QPixmap, QRadialGradient, QTransform)
from PySide6.QtWidgets import (QApplication, QFrame, QGroupBox, QHBoxLayout,
    QSizePolicy, QSpacerItem, QToolButton, QVBoxLayout,
    QWidget)

from secondary import XToolButton
import images_rc

class Ui_ToolBar(object):
    def setupUi(self, ToolBar):
        if not ToolBar.objectName():
            ToolBar.setObjectName(u"ToolBar")
        ToolBar.resize(967, 73)
        ToolBar.setContextMenuPolicy(Qt.PreventContextMenu)
        ToolBar.setLocale(QLocale(QLocale.English, QLocale.UnitedStates))
        self.verticalLayout_2 = QVBoxLayout(ToolBar)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 2, 0)
        self.tool_frame = QFrame(ToolBar)
        self.tool_frame.setObjectName(u"tool_frame")
        self.tool_frame.setContextMenuPolicy(Qt.CustomContextMenu)
        self.horizontalLayout = QHBoxLayout(self.tool_frame)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.check_btn = QToolButton(self.tool_frame)
        self.check_btn.setObjectName(u"check_btn")
        self.check_btn.setMinimumSize(QSize(80, 0))
        icon = QIcon()
        icon.addFile(u"../KataLib/:/stuff/exec.png", QSize(), QIcon.Normal, QIcon.Off)
        self.check_btn.setIcon(icon)
        self.check_btn.setIconSize(QSize(48, 48))
        self.check_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.check_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.check_btn)

        self.scan_btn = QToolButton(self.tool_frame)
        self.scan_btn.setObjectName(u"scan_btn")
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scan_btn.sizePolicy().hasHeightForWidth())
        self.scan_btn.setSizePolicy(sizePolicy)
        self.scan_btn.setMinimumSize(QSize(80, 0))
        icon1 = QIcon()
        icon1.addFile(u":/stuff/folder_reader.png", QSize(), QIcon.Normal, QIcon.Off)
        self.scan_btn.setIcon(icon1)
        self.scan_btn.setIconSize(QSize(48, 48))
        self.scan_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.scan_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.scan_btn)

        self.export_btn = QToolButton(self.tool_frame)
        self.export_btn.setObjectName(u"export_btn")
        sizePolicy.setHeightForWidth(self.export_btn.sizePolicy().hasHeightForWidth())
        self.export_btn.setSizePolicy(sizePolicy)
        self.export_btn.setMinimumSize(QSize(80, 0))
        icon2 = QIcon()
        icon2.addFile(u":/stuff/file_save.png", QSize(), QIcon.Normal, QIcon.Off)
        self.export_btn.setIcon(icon2)
        self.export_btn.setIconSize(QSize(48, 48))
        self.export_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.export_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.export_btn)

        self.open_btn = QToolButton(self.tool_frame)
        self.open_btn.setObjectName(u"open_btn")
        sizePolicy.setHeightForWidth(self.open_btn.sizePolicy().hasHeightForWidth())
        self.open_btn.setSizePolicy(sizePolicy)
        self.open_btn.setMinimumSize(QSize(80, 0))
        icon3 = QIcon()
        icon3.addFile(u":/stuff/files_view.png", QSize(), QIcon.Normal, QIcon.Off)
        self.open_btn.setIcon(icon3)
        self.open_btn.setIconSize(QSize(48, 48))
        self.open_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.open_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.open_btn)

        self.filter_btn = QToolButton(self.tool_frame)
        self.filter_btn.setObjectName(u"filter_btn")
        sizePolicy.setHeightForWidth(self.filter_btn.sizePolicy().hasHeightForWidth())
        self.filter_btn.setSizePolicy(sizePolicy)
        icon4 = QIcon()
        icon4.addFile(u":/stuff/filter.png", QSize(), QIcon.Normal, QIcon.Off)
        self.filter_btn.setIcon(icon4)
        self.filter_btn.setIconSize(QSize(48, 48))
        self.filter_btn.setCheckable(True)
        self.filter_btn.setChecked(False)
        self.filter_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.filter_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.filter_btn)

        self.merge_btn = QToolButton(self.tool_frame)
        self.merge_btn.setObjectName(u"merge_btn")
        sizePolicy.setHeightForWidth(self.merge_btn.sizePolicy().hasHeightForWidth())
        self.merge_btn.setSizePolicy(sizePolicy)
        self.merge_btn.setMinimumSize(QSize(80, 0))
        icon5 = QIcon()
        icon5.addFile(u":/stuff/files_merge.png", QSize(), QIcon.Normal, QIcon.Off)
        self.merge_btn.setIcon(icon5)
        self.merge_btn.setIconSize(QSize(48, 48))
        self.merge_btn.setPopupMode(QToolButton.MenuButtonPopup)
        self.merge_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.merge_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.merge_btn)

        self.delete_btn = QToolButton(self.tool_frame)
        self.delete_btn.setObjectName(u"delete_btn")
        sizePolicy.setHeightForWidth(self.delete_btn.sizePolicy().hasHeightForWidth())
        self.delete_btn.setSizePolicy(sizePolicy)
        self.delete_btn.setMinimumSize(QSize(80, 0))
        icon6 = QIcon()
        icon6.addFile(u":/stuff/files_delete.png", QSize(), QIcon.Normal, QIcon.Off)
        self.delete_btn.setIcon(icon6)
        self.delete_btn.setIconSize(QSize(48, 48))
        self.delete_btn.setPopupMode(QToolButton.MenuButtonPopup)
        self.delete_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.delete_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.delete_btn)

        self.clear_btn = QToolButton(self.tool_frame)
        self.clear_btn.setObjectName(u"clear_btn")
        sizePolicy.setHeightForWidth(self.clear_btn.sizePolicy().hasHeightForWidth())
        self.clear_btn.setSizePolicy(sizePolicy)
        self.clear_btn.setMinimumSize(QSize(80, 0))
        icon7 = QIcon()
        icon7.addFile(u":/stuff/trash.png", QSize(), QIcon.Normal, QIcon.Off)
        self.clear_btn.setIcon(icon7)
        self.clear_btn.setIconSize(QSize(48, 48))
        self.clear_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.clear_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.clear_btn)

        self.horizontalSpacer = QSpacerItem(86, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer)

        self.view_grp = QGroupBox(self.tool_frame)
        self.view_grp.setObjectName(u"view_grp")
        self.horizontalLayout_3 = QHBoxLayout(self.view_grp)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.books_view_btn = QToolButton(self.view_grp)
        self.books_view_btn.setObjectName(u"books_view_btn")
        sizePolicy1 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.books_view_btn.sizePolicy().hasHeightForWidth())
        self.books_view_btn.setSizePolicy(sizePolicy1)
        icon8 = QIcon()
        icon8.addFile(u":/stuff/view_books.png", QSize(), QIcon.Normal, QIcon.Off)
        self.books_view_btn.setIcon(icon8)
        self.books_view_btn.setIconSize(QSize(48, 48))
        self.books_view_btn.setCheckable(True)
        self.books_view_btn.setChecked(True)
        self.books_view_btn.setAutoExclusive(True)
        self.books_view_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.books_view_btn.setAutoRaise(True)

        self.horizontalLayout_3.addWidget(self.books_view_btn)

        self.high_view_btn = QToolButton(self.view_grp)
        self.high_view_btn.setObjectName(u"high_view_btn")
        sizePolicy1.setHeightForWidth(self.high_view_btn.sizePolicy().hasHeightForWidth())
        self.high_view_btn.setSizePolicy(sizePolicy1)
        icon9 = QIcon()
        icon9.addFile(u":/stuff/view-highlights.png", QSize(), QIcon.Normal, QIcon.Off)
        self.high_view_btn.setIcon(icon9)
        self.high_view_btn.setIconSize(QSize(48, 48))
        self.high_view_btn.setCheckable(True)
        self.high_view_btn.setAutoExclusive(True)
        self.high_view_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.high_view_btn.setAutoRaise(True)

        self.horizontalLayout_3.addWidget(self.high_view_btn)


        self.horizontalLayout.addWidget(self.view_grp)

        self.mode_grp = QGroupBox(self.tool_frame)
        self.mode_grp.setObjectName(u"mode_grp")
        sizePolicy.setHeightForWidth(self.mode_grp.sizePolicy().hasHeightForWidth())
        self.mode_grp.setSizePolicy(sizePolicy)
        self.verticalLayout = QVBoxLayout(self.mode_grp)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.loaded_btn = QToolButton(self.mode_grp)
        self.loaded_btn.setObjectName(u"loaded_btn")
        sizePolicy.setHeightForWidth(self.loaded_btn.sizePolicy().hasHeightForWidth())
        self.loaded_btn.setSizePolicy(sizePolicy)
        self.loaded_btn.setMinimumSize(QSize(80, 0))
        icon10 = QIcon()
        icon10.addFile(u":/stuff/books.png", QSize(), QIcon.Normal, QIcon.Off)
        self.loaded_btn.setIcon(icon10)
        self.loaded_btn.setIconSize(QSize(24, 24))
        self.loaded_btn.setCheckable(True)
        self.loaded_btn.setChecked(True)
        self.loaded_btn.setAutoExclusive(True)
        self.loaded_btn.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        self.loaded_btn.setAutoRaise(True)

        self.verticalLayout.addWidget(self.loaded_btn)

        self.db_btn = XToolButton(self.mode_grp)
        self.db_btn.setObjectName(u"db_btn")
        sizePolicy.setHeightForWidth(self.db_btn.sizePolicy().hasHeightForWidth())
        self.db_btn.setSizePolicy(sizePolicy)
        self.db_btn.setMinimumSize(QSize(80, 0))
        icon11 = QIcon()
        icon11.addFile(u":/stuff/db.png", QSize(), QIcon.Normal, QIcon.Off)
        self.db_btn.setIcon(icon11)
        self.db_btn.setIconSize(QSize(24, 24))
        self.db_btn.setCheckable(True)
        self.db_btn.setAutoExclusive(True)
        self.db_btn.setPopupMode(QToolButton.MenuButtonPopup)
        self.db_btn.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        self.db_btn.setAutoRaise(True)

        self.verticalLayout.addWidget(self.db_btn)


        self.horizontalLayout.addWidget(self.mode_grp)

        self.about_btn = QToolButton(self.tool_frame)
        self.about_btn.setObjectName(u"about_btn")
        sizePolicy.setHeightForWidth(self.about_btn.sizePolicy().hasHeightForWidth())
        self.about_btn.setSizePolicy(sizePolicy)
        self.about_btn.setMinimumSize(QSize(80, 0))
        icon12 = QIcon()
        icon12.addFile(u":/stuff/logo64.png", QSize(), QIcon.Normal, QIcon.Off)
        self.about_btn.setIcon(icon12)
        self.about_btn.setIconSize(QSize(48, 48))
        self.about_btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        self.about_btn.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.about_btn)


        self.verticalLayout_2.addWidget(self.tool_frame)


        self.retranslateUi(ToolBar)

        QMetaObject.connectSlotsByName(ToolBar)
    # setupUi

    def retranslateUi(self, ToolBar):
        ToolBar.setWindowTitle("")
        self.check_btn.setText("")
#if QT_CONFIG(tooltip)
        self.scan_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Scans a directory for Koreader metadata files\n"
"Can also be the eReader's root directory (Ctrl+L)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.scan_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Scans a directory for Koreader metadata files. Can also be the eReader's root directory (Ctrl+L)", None))
#endif // QT_CONFIG(statustip)
        self.scan_btn.setText(QCoreApplication.translate("ToolBar", u"Scan Directory", None))
#if QT_CONFIG(tooltip)
        self.export_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Export selected highlights (Ctrl+S)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.export_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Export selected highlights (Ctrl+S)", None))
#endif // QT_CONFIG(statustip)
        self.export_btn.setText(QCoreApplication.translate("ToolBar", u"Export", None))
#if QT_CONFIG(tooltip)
        self.open_btn.setToolTip(QCoreApplication.translate("ToolBar", u"View the selected book (Ctrl+B)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.open_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"View the selected book (Ctrl+B)", None))
#endif // QT_CONFIG(statustip)
        self.open_btn.setText(QCoreApplication.translate("ToolBar", u"View", None))
#if QT_CONFIG(tooltip)
        self.filter_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Open the filtering popup (Alt+F)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.filter_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Open the filtering popup (Alt+F)", None))
#endif // QT_CONFIG(statustip)
        self.filter_btn.setText(QCoreApplication.translate("ToolBar", u"Filter", None))
#if QT_CONFIG(shortcut)
        self.filter_btn.setShortcut(QCoreApplication.translate("ToolBar", u"Alt+F", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.merge_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Merge the highlights from the same book in two different\n"
"devices, and/or sync their reading position.\n"
"Activated only if two entries of the same book are selected.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.merge_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Merge the highlights from the same book in two different devices, and/or sync their reading position. Activated only if two entries of the same book are selected.", None))
#endif // QT_CONFIG(statustip)
        self.merge_btn.setText(QCoreApplication.translate("ToolBar", u"Merge/Sync", None))
#if QT_CONFIG(tooltip)
        self.delete_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Delete selected Highlights (Del)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.delete_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Delete selected Highlights (Del)", None))
#endif // QT_CONFIG(statustip)
        self.delete_btn.setText(QCoreApplication.translate("ToolBar", u"Delete", None))
#if QT_CONFIG(tooltip)
        self.clear_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Clears the books list (Ctrl+Backspace)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.clear_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Clears the books list (Ctrl+Backspace)", None))
#endif // QT_CONFIG(statustip)
        self.clear_btn.setText(QCoreApplication.translate("ToolBar", u"Clear List", None))
#if QT_CONFIG(tooltip)
        self.books_view_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Books View", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.books_view_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Books View", None))
#endif // QT_CONFIG(statustip)
        self.books_view_btn.setText(QCoreApplication.translate("ToolBar", u"Books", None))
#if QT_CONFIG(tooltip)
        self.high_view_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Highlights View", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.high_view_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Highlights View", None))
#endif // QT_CONFIG(statustip)
        self.high_view_btn.setText(QCoreApplication.translate("ToolBar", u"Highlights", None))
#if QT_CONFIG(tooltip)
        self.loaded_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Show the loaded files", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.loaded_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Show the loaded files", None))
#endif // QT_CONFIG(statustip)
        self.loaded_btn.setText(QCoreApplication.translate("ToolBar", u"Loaded", None))
#if QT_CONFIG(tooltip)
        self.db_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Show the archived files in the database\n"
"(Right click for database actions menu)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.db_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Show the archived files in the database (Right click for database actions menu)", None))
#endif // QT_CONFIG(statustip)
        self.db_btn.setText(QCoreApplication.translate("ToolBar", u"Archived", None))
#if QT_CONFIG(tooltip)
        self.about_btn.setToolTip(QCoreApplication.translate("ToolBar", u"Info about the KoHighlights (Ctrl+I)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.about_btn.setStatusTip(QCoreApplication.translate("ToolBar", u"Info about the KoHighlights (Ctrl+I)", None))
#endif // QT_CONFIG(statustip)
        self.about_btn.setText(QCoreApplication.translate("ToolBar", u"About", None))
    # retranslateUi

